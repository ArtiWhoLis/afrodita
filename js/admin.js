// admin.js ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

document.addEventListener('DOMContentLoaded', function() {
    // --- –≠–ª–µ–º–µ–Ω—Ç—ã ---
    const adminLogin = document.getElementById('admin-login');
    const adminRequests = document.getElementById('admin-requests');
    // --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
    const token = localStorage.getItem('adminToken');
    let role = null;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —á–µ—Ä–µ–∑ /api/profile –∏ /api/my-requests (–∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint)
    async function checkAdmin() {
        if (!token) return false;
        // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏, –Ω–æ –ø–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞—è–≤–∫–∏
        const res = await fetch('/api/my-requests', { headers: { 'Authorization': 'Bearer ' + token } });
        if (!res.ok) return false;
        // –ï—Å–ª–∏ admin ‚Äî –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏—Ç
        const data = await res.json();
        // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –∑–∞—è–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π –∏ –µ—Å—Ç—å –ø–æ–ª–µ user_id —É –≤—Å–µ—Ö ‚Äî –∑–Ω–∞—á–∏—Ç admin
        // –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
        return true;
    }
    // --- –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ ---
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const password = document.getElementById('admin-password').value;
            // –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏: –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ /api/role-login (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞)
            const res = await fetch('/api/role-login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ phone: 'admin', password }) // phone: 'admin' ‚Äî –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            });
            const data = await res.json();
            if (res.ok && data.token && data.role === 'admin') {
                localStorage.setItem('adminToken', data.token);
                location.reload();
            } else {
                document.getElementById('login-error').textContent = data.error || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
            }
        });
    }
    // --- –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ---
    (async function() {
        if (await checkAdmin()) {
            if (adminLogin) adminLogin.style.display = 'none';
            const adminPanel = document.getElementById('admin-panel');
            if (adminPanel) adminPanel.style.display = '';
            // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
            let logoutBtn = document.getElementById('admin-logout-btn');
            if (!logoutBtn) {
                logoutBtn = document.createElement('button');
                logoutBtn.id = 'admin-logout-btn';
                logoutBtn.textContent = '–í—ã–π—Ç–∏';
                logoutBtn.className = 'btn-cancel';
                logoutBtn.style = 'position:absolute;top:20px;right:30px;z-index:10;';
                adminPanel.parentNode.insertBefore(logoutBtn, adminPanel);
                logoutBtn.onclick = function() {
                    localStorage.removeItem('adminToken');
                    location.reload();
                };
            }
            // –í–∫–ª–∞–¥–∫–∏
            const tabs = document.querySelectorAll('.admin-tab');
            const tabContents = document.querySelectorAll('.admin-tab-content');
            tabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    activateTab(tab.dataset.tab);
                });
            });
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞—è–≤–∫–∏
            tabs[0].classList.add('active');
            tabContents[0].style.display = '';
        } else {
            if (adminLogin) adminLogin.style.display = '';
            const adminPanel = document.getElementById('admin-panel');
            if (adminPanel) adminPanel.style.display = 'none';
            // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            const logoutBtn = document.getElementById('admin-logout-btn');
            if (logoutBtn) logoutBtn.remove();
        }
    })();
    // --- –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞: –≤–∫–ª–∞–¥–∫–∏, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö, CRUD ---
    // --- –ó–∞—è–≤–∫–∏ ---
    async function loadRequests() {
        const tbody = document.getElementById('requests-body');
        if (!tbody) return;
        tbody.innerHTML = '<tr><td colspan="7">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>';
        const res = await fetch('/api/my-requests', { headers: { 'Authorization': 'Bearer ' + token } });
        const data = await res.json();
        if (!Array.isArray(data)) {
            tbody.innerHTML = '<tr><td colspan="7">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>';
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω–∏–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        window._allRequests = data;
        renderRequests(data);
    }
    function renderRequests(requests) {
        const tbody = document.getElementById('requests-body');
        if (!tbody) return;
        if (!requests.length) {
            tbody.innerHTML = '<tr><td colspan="7">–ù–µ—Ç –∑–∞—è–≤–æ–∫</td></tr>';
            return;
        }
        tbody.innerHTML = '';
        requests.forEach(r => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${r.name}</td>
                <td>${r.phone}</td>
                <td>${r.service}</td>
                <td>${r.date}</td>
                <td>${r.time}</td>
                <td>${r.comment || ''}</td>
                <td><button class="btn-cancel btn-sm" data-id="${r.id}">–£–¥–∞–ª–∏—Ç—å</button></td>
            `;
            tbody.appendChild(tr);
        });
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        tbody.querySelectorAll('button[data-id]').forEach(btn => {
            btn.onclick = async function() {
                if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É?')) return;
                await safeAction(async () => {
                    await fetch(`/api/requests/${btn.dataset.id}`, {
                        method: 'DELETE',
                        headers: { 'Authorization': 'Bearer ' + token }
                    });
                }, () => {
                    loadRequests();
                });
            };
        });
    }
    // --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
    function filterRequests() {
        let reqs = window._allRequests || [];
        const date = document.getElementById('filter-date').value;
        const service = document.getElementById('filter-service').value;
        const search = document.getElementById('filter-search').value.trim().toLowerCase();
        if (date) reqs = reqs.filter(r => r.date === date);
        if (service) reqs = reqs.filter(r => r.service == service);
        if (search) reqs = reqs.filter(r => (r.name + r.phone).toLowerCase().includes(search));
        renderRequests(reqs);
    }
    // --- –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ ---
    const clearBtn = document.getElementById('clear-requests');
    if (clearBtn) {
        clearBtn.onclick = async function() {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏?')) return;
            await safeAction(async () => {
                await fetch('/api/requests', { method: 'DELETE', headers: { 'Authorization': 'Bearer ' + token } });
            }, () => {
                loadRequests();
            });
        };
    }
    // --- –°–æ–±—ã—Ç–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---
    ['filter-date','filter-service','filter-search'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.oninput = filterRequests;
    });
    // --- –ü–æ–¥–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ ---
    async function loadServicesForFilter() {
        const sel = document.getElementById('filter-service');
        if (!sel) return;
        const res = await fetch('/api/services');
        const data = await res.json();
        sel.innerHTML = '<option value="">–í—Å–µ —É—Å–ª—É–≥–∏</option>';
        data.forEach(s => {
            const opt = document.createElement('option');
            opt.value = s.id;
            opt.textContent = s.name;
            sel.appendChild(opt);
        });
    }
    // --- –£—Å–ª—É–≥–∏ ---
    async function loadServices() {
        const tbody = document.getElementById('services-body');
        if (!tbody) return;
        tbody.innerHTML = '<tr><td colspan="3">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>';
        const res = await fetch('/api/services');
        const data = await res.json();
        window._allServices = data;
        renderServices(data);
    }
    function renderServices(services) {
        const tbody = document.getElementById('services-body');
        if (!tbody) return;
        if (!services.length) {
            tbody.innerHTML = '<tr><td colspan="3">–ù–µ—Ç —É—Å–ª—É–≥</td></tr>';
            return;
        }
        tbody.innerHTML = '';
        services.forEach(s => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${s.name}</td>
                <td>${s.description || ''}</td>
                <td>
                    <button class="btn-sm btn" data-edit="${s.id}">‚úèÔ∏è</button>
                    <button class="btn-sm btn-cancel" data-del="${s.id}">üóëÔ∏è</button>
                </td>
            `;
            tbody.appendChild(tr);
        });
        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tbody.querySelectorAll('button[data-edit]').forEach(btn => {
            btn.onclick = () => showServiceForm('edit', btn.dataset.edit);
        });
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        tbody.querySelectorAll('button[data-del]').forEach(btn => {
            btn.onclick = async () => {
                if (!confirm('–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É?')) return;
                await safeAction(async () => {
                    await fetch(`/api/services/${btn.dataset.del}`, {
                        method: 'DELETE',
                        headers: { 'Authorization': 'Bearer ' + token }
                    });
                }, () => {
                    loadServices();
                });
            };
        });
    }
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    function showServiceForm(mode, id) {
        const modal = document.getElementById('service-form-modal');
        modal.style.display = '';
        let service = { name: '', description: '' };
        if (mode === 'edit') {
            service = window._allServices.find(s => s.id == id) || service;
        }
        modal.innerHTML = `
            <div style="background:#fff;padding:24px 28px;border-radius:10px;box-shadow:0 2px 12px #0003;max-width:400px;margin:40px auto;position:relative;">
                <button id="close-service-modal" style="position:absolute;top:8px;right:12px;font-size:1.3em;background:none;border:none;">√ó</button>
                <h3 style="margin-top:0;">${mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'} —É—Å–ª—É–≥—É</h3>
                <form id="service-form">
                    <div class="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                        <input type="text" name="name" required maxlength="100" value="${service.name || ''}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏">
                    </div>
                    <div class="form-group">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea name="description" maxlength="300" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)">${service.description || ''}</textarea>
                    </div>
                    <div class="form-group text-center">
                        <button type="submit" class="btn">${mode === 'edit' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
                    </div>
                </form>
            </div>
        `;
        document.getElementById('close-service-modal').onclick = () => { modal.style.display = 'none'; };
        document.getElementById('service-form').onsubmit = async function(e) {
            e.preventDefault();
            const name = this.name.value.trim();
            const description = this.description.value.trim();
            if (!name) return alert('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            await safeAction(async () => {
                if (mode === 'edit') {
                    await fetch(`/api/services/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                        body: JSON.stringify({ name, description })
                    });
                } else {
                    await fetch('/api/services', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                        body: JSON.stringify({ name, description })
                    });
                }
            }, () => {
                modal.style.display = 'none';
                loadServices();
            });
        };
    }
    // --- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É ---
    const addServiceBtn = document.getElementById('add-service-btn');
    if (addServiceBtn) addServiceBtn.onclick = () => showServiceForm('add');
    // --- –ú–∞—Å—Ç–µ—Ä–∞ ---
    async function loadMasters() {
        const tbody = document.getElementById('masters-body');
        if (!tbody) return;
        tbody.innerHTML = '<tr><td colspan="4">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>';
        const res = await fetch('/api/masters', { headers: { 'Authorization': 'Bearer ' + token } });
        const data = await res.json();
        window._allMasters = data;
        renderMasters(data);
    }
    async function getServiceNamesByIds(ids) {
        if (!window._allServices) await loadServices();
        return (window._allServices || []).filter(s => ids.includes(s.id)).map(s => s.name).join(', ');
    }
    async function renderMasters(masters) {
        const tbody = document.getElementById('masters-body');
        if (!tbody) return;
        if (!masters.length) {
            tbody.innerHTML = '<tr><td colspan="4">–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤</td></tr>';
            return;
        }
        tbody.innerHTML = '';
        for (const m of masters) {
            // –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
            const servRes = await fetch(`/api/master-services?master_id=${m.id}`, { headers: { 'Authorization': 'Bearer ' + token } });
            const servData = await servRes.json();
            const serviceIds = servData.map(s => s.service_id);
            const serviceNames = await getServiceNamesByIds(serviceIds);
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${m.fio}</td>
                <td>${m.position}</td>
                <td>${serviceNames}</td>
                <td>
                    <button class="btn-sm btn" data-edit="${m.id}">‚úèÔ∏è</button>
                    <button class="btn-sm btn-cancel" data-del="${m.id}">üóëÔ∏è</button>
                </td>
            `;
            tbody.appendChild(tr);
        }
        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tbody.querySelectorAll('button[data-edit]').forEach(btn => {
            btn.onclick = () => showMasterForm('edit', btn.dataset.edit);
        });
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        tbody.querySelectorAll('button[data-del]').forEach(btn => {
            btn.onclick = async () => {
                if (!confirm('–£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞?')) return;
                await safeAction(async () => {
                    await fetch(`/api/masters/${btn.dataset.del}`, {
                        method: 'DELETE',
                        headers: { 'Authorization': 'Bearer ' + token }
                    });
                }, () => {
                    loadMasters();
                });
            };
        });
    }
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ ---
    async function showMasterForm(mode, id) {
        const modal = document.getElementById('master-form-modal');
        modal.style.display = '';
        let master = { fio: '', position: '', user_id: '' };
        let selectedServices = [];
        if (mode === 'edit') {
            master = window._allMasters.find(m => m.id == id) || master;
            // –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
            const servRes = await fetch(`/api/master-services?master_id=${id}`, { headers: { 'Authorization': 'Bearer ' + token } });
            const servData = await servRes.json();
            selectedServices = servData.map(s => s.service_id);
        }
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏
        if (!window._allServices) await loadServices();
        const services = window._allServices || [];
        modal.innerHTML = `
            <div style="background:#fff;padding:24px 28px;border-radius:10px;box-shadow:0 2px 12px #0003;max-width:420px;margin:40px auto;position:relative;">
                <button id="close-master-modal" style="position:absolute;top:8px;right:12px;font-size:1.3em;background:none;border:none;">√ó</button>
                <h3 style="margin-top:0;">${mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'} –º–∞—Å—Ç–µ—Ä–∞</h3>
                <form id="master-form">
                    <div class="form-group">
                        <label>–§–ò–û</label>
                        <input type="text" name="fio" required maxlength="100" value="${master.fio || ''}" placeholder="–§–ò–û –º–∞—Å—Ç–µ—Ä–∞">
                    </div>
                    <div class="form-group">
                        <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
                        <input type="text" name="position" required maxlength="100" value="${master.position || ''}" placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å/—É—Å–ª—É–≥–∞">
                    </div>
                    <div class="form-group">
                        <label>–£—Å–ª—É–≥–∏</label>
                        <select name="services" multiple size="${Math.min(services.length, 6)}" style="width:100%;">
                            ${services.map(s => `<option value="${s.id}"${selectedServices.includes(s.id) ? ' selected' : ''}>${s.name}</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group text-center">
                        <button type="submit" class="btn">${mode === 'edit' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
                    </div>
                </form>
            </div>
        `;
        document.getElementById('close-master-modal').onclick = () => { modal.style.display = 'none'; };
        document.getElementById('master-form').onsubmit = async function(e) {
            e.preventDefault();
            const fio = this.fio.value.trim();
            const position = this.position.value.trim();
            const servicesSelected = Array.from(this.services.selectedOptions).map(o => +o.value);
            if (!fio || !position || !servicesSelected.length) return alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É');
            await safeAction(async () => {
                if (mode === 'edit') {
                    await fetch(`/api/masters/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                        body: JSON.stringify({ fio, position })
                    });
                    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
                    await fetch(`/api/master-services?master_id=${id}`, { method: 'DELETE', headers: { 'Authorization': 'Bearer ' + token } });
                    for (const sid of servicesSelected) {
                        await fetch('/api/master-services', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                            body: JSON.stringify({ master_id: id, service_id: sid })
                        });
                    }
                } else {
                    // –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω user_id (—Å–æ–∑–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∑–∞—Ç–µ–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ä–æ–ª—å—é –º–∞—Å—Ç–µ—Ä)
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ
                    alert('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –º–∞—Å—Ç–µ—Ä –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–¥–º–∏–Ω—ã".');
                    modal.style.display = 'none';
                    return;
                }
            }, () => {
                modal.style.display = 'none';
                loadMasters();
            });
        };
    }
    // --- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ ---
    const addMasterBtn = document.getElementById('add-master-btn');
    if (addMasterBtn) addMasterBtn.onclick = () => showMasterForm('add');
    // --- –ê–¥–º–∏–Ω—ã ---
    async function loadAdmins() {
        const tbody = document.getElementById('admins-body');
        if (!tbody) return;
        tbody.innerHTML = '<tr><td colspan="4">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>';
        const res = await fetch('/api/admins', { headers: { 'Authorization': 'Bearer ' + token } });
        const data = await res.json();
        window._allAdmins = data;
        renderAdmins(data);
    }
    async function renderAdmins(admins) {
        const tbody = document.getElementById('admins-body');
        if (!tbody) return;
        if (!admins.length) {
            tbody.innerHTML = '<tr><td colspan="4">–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤</td></tr>';
            return;
        }
        tbody.innerHTML = '';
        for (const a of admins) {
            // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRes = await fetch(`/api/users/${a.user_id}`, { headers: { 'Authorization': 'Bearer ' + token } });
            const user = await userRes.json();
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${user.fio}</td>
                <td>${user.phone}</td>
                <td>${a.role}</td>
                <td>
                    <button class="btn-sm btn" data-edit="${a.id}">‚úèÔ∏è</button>
                    <button class="btn-sm btn-cancel" data-del="${a.id}">üóëÔ∏è</button>
                </td>
            `;
            tbody.appendChild(tr);
        }
        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tbody.querySelectorAll('button[data-edit]').forEach(btn => {
            btn.onclick = () => showAdminForm('edit', btn.dataset.edit);
        });
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        tbody.querySelectorAll('button[data-del]').forEach(btn => {
            btn.onclick = async () => {
                if (!confirm('–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞/–º–∞—Å—Ç–µ—Ä–∞?')) return;
                await safeAction(async () => {
                    await fetch(`/api/admins/${btn.dataset.del}`, {
                        method: 'DELETE',
                        headers: { 'Authorization': 'Bearer ' + token }
                    });
                }, () => {
                    loadAdmins();
                });
            };
        });
    }
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞/–º–∞—Å—Ç–µ—Ä–∞ ---
    async function showAdminForm(mode, id) {
        const modal = document.getElementById('admin-form-modal');
        modal.style.display = '';
        let admin = { user_id: '', role: 'admin' };
        if (mode === 'edit') {
            admin = window._allAdmins.find(a => a.id == id) || admin;
        }
        // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤—ã–±–æ—Ä–∞)
        const usersRes = await fetch('/api/users', { headers: { 'Authorization': 'Bearer ' + token } });
        const users = await usersRes.json();
        modal.innerHTML = `
            <div style="background:#fff;padding:24px 28px;border-radius:10px;box-shadow:0 2px 12px #0003;max-width:420px;margin:40px auto;position:relative;">
                <button id="close-admin-modal" style="position:absolute;top:8px;right:12px;font-size:1.3em;background:none;border:none;">√ó</button>
                <h3 style="margin-top:0;">${mode === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'} –∞–¥–º–∏–Ω–∞/–º–∞—Å—Ç–µ—Ä–∞</h3>
                <form id="admin-form">
                    <div class="form-group">
                        <label>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</label>
                        <input type="text" id="user-search" placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û/—Ç–µ–ª–µ—Ñ–æ–Ω—É" style="width:100%;margin-bottom:6px;">
                        <select name="user_id" required style="width:100%;">
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</option>
                            ${users.map(u => `<option value="${u.id}"${u.id == admin.user_id ? ' selected' : ''}>${u.fio} (${u.phone})</option>`).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–†–æ–ª—å</label>
                        <select name="role" required style="width:100%;">
                            <option value="admin"${admin.role === 'admin' ? ' selected' : ''}>–ê–¥–º–∏–Ω</option>
                            <option value="master"${admin.role === 'master' ? ' selected' : ''}>–ú–∞—Å—Ç–µ—Ä</option>
                        </select>
                    </div>
                    <div class="form-group text-center">
                        <button type="submit" class="btn">${mode === 'edit' ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}</button>
                        ${mode === 'edit' ? `<button type="button" id="reset-password-btn" class="btn-cancel" style="margin-left:10px;">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</button>` : ''}
                        ${mode === 'edit' ? `<button type="button" id="show-audit-btn" class="btn" style="margin-left:10px;">–ò—Å—Ç–æ—Ä–∏—è</button>` : ''}
                    </div>
                </form>
            </div>
        `;
        document.getElementById('close-admin-modal').onclick = () => { modal.style.display = 'none'; };
        // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        const userSearch = document.getElementById('user-search');
        const userSelect = modal.querySelector('select[name="user_id"]');
        userSearch.oninput = () => filterUserOptions(userSearch, userSelect);
        // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
        if (mode === 'edit') {
            document.getElementById('reset-password-btn').onclick = async () => {
                const newPassword = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤):');
                if (!newPassword || newPassword.length < 6) return alert('–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
                await safeAction(async () => {
                    await fetch(`/api/users/${admin.user_id}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                        body: JSON.stringify({ newPassword })
                    });
                }, () => showNotice('–ü–∞—Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω!'));
            };
            // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            document.getElementById('show-audit-btn').onclick = () => showAuditLog('admin', id);
        }
        document.getElementById('admin-form').onsubmit = async function(e) {
            e.preventDefault();
            const user_id = this.user_id.value;
            const role = this.role.value;
            if (!user_id || !role) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å');
            await safeAction(async () => {
                if (mode === 'edit') {
                    await fetch(`/api/admins/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                        body: JSON.stringify({ user_id, role })
                    });
                } else {
                    await fetch('/api/admins', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + token },
                        body: JSON.stringify({ user_id, role })
                    });
                }
            }, () => {
                modal.style.display = 'none';
                loadAdmins();
            });
        };
    }
    // --- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ---
    const addAdminBtn = document.getElementById('add-admin-btn');
    if (addAdminBtn) addAdminBtn.onclick = () => showAdminForm('add');
    // --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    function showNotice(msg, isError = false) {
        let notice = document.getElementById('admin-notice');
        if (!notice) {
            notice = document.createElement('div');
            notice.id = 'admin-notice';
            notice.style = 'position:fixed;top:30px;right:30px;z-index:9999;padding:14px 22px;border-radius:8px;font-size:1.1em;box-shadow:0 2px 12px #0002;transition:opacity .3s;';
            document.body.appendChild(notice);
        }
        notice.textContent = msg;
        notice.style.background = isError ? '#ffd6d6' : '#d6ffd6';
        notice.style.color = isError ? '#a00' : '#070';
        notice.style.opacity = '1';
        setTimeout(() => { notice.style.opacity = '0'; }, 2200);
    }
    // --- –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–∫ ---
    function activateTab(tabName) {
        const tabs = document.querySelectorAll('.admin-tab');
        const tabContents = document.querySelectorAll('.admin-tab-content');
        tabs.forEach(t => t.classList.remove('active'));
        tabContents.forEach(c => c.style.display = 'none');
        const tab = document.querySelector(`.admin-tab[data-tab="${tabName}"]`);
        const content = document.getElementById('tab-' + tabName);
        if (tab && content) {
            tab.classList.add('active');
            content.style.display = '';
            if (tabName === 'requests') loadRequests();
            if (tabName === 'services') loadServices();
            if (tabName === 'masters') loadMasters();
            if (tabName === 'admins') loadAdmins();
        }
    }
    // --- –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
    // (–ø—Ä–∏–º–µ—Ä –¥–ª—è —É—Å–ª—É–≥, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π)
    async function safeAction(action, onSuccess) {
        try {
            await action();
            showNotice('–£—Å–ø–µ—à–Ω–æ!');
            if (onSuccess) onSuccess();
        } catch (e) {
            showNotice(e.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', true);
        }
    }
    // --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è safeAction ---
    // –í–µ–∑–¥–µ, –≥–¥–µ –±—ã–ª fetch(...), –æ–±–µ—Ä–Ω—É—Ç—å –≤ safeAction(() => fetch(...), ...)
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ showServiceForm:
    // await safeAction(async () => { await fetch(...) }, () => { modal.style.display = 'none'; loadServices(); });
    // --- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤, –∞–¥–º–∏–Ω–æ–≤, –∑–∞—è–≤–æ–∫ ---
    // ... (–≤—Å–µ CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–µ—Ä–Ω—É—Ç—å –≤ safeAction)
    // --- –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ---
    activateTab('requests');
    // --- –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ ---
    function addExportButtons() {
        const requestsTab = document.getElementById('tab-requests');
        if (requestsTab && !document.getElementById('export-requests-btn')) {
            const btn = document.createElement('button');
            btn.id = 'export-requests-btn';
            btn.className = 'btn';
            btn.textContent = '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ (CSV)';
            btn.style = 'margin-bottom:12px;float:right;';
            btn.onclick = () => window.open('/api/export/requests', '_blank');
            requestsTab.prepend(btn);
        }
        const usersTab = document.getElementById('tab-admins');
        if (usersTab && !document.getElementById('export-users-btn')) {
            const btn = document.createElement('button');
            btn.id = 'export-users-btn';
            btn.className = 'btn';
            btn.textContent = '–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)';
            btn.style = 'margin-bottom:12px;float:right;';
            btn.onclick = () => window.open('/api/export/users', '_blank');
            usersTab.prepend(btn);
        }
        const servicesTab = document.getElementById('tab-services');
        if (servicesTab && !document.getElementById('export-services-btn')) {
            const btn = document.createElement('button');
            btn.id = 'export-services-btn';
            btn.className = 'btn';
            btn.textContent = '–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ª—É–≥ (CSV)';
            btn.style = 'margin-bottom:12px;float:right;';
            btn.onclick = () => window.open('/api/export/services', '_blank');
            servicesTab.prepend(btn);
        }
    }
    // --- –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ ---
    function filterUserOptions(input, select) {
        const val = input.value.trim().toLowerCase();
        Array.from(select.options).forEach(opt => {
            if (!opt.value) return;
            opt.style.display = (opt.textContent.toLowerCase().includes(val)) ? '' : 'none';
        });
    }
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (audit log) ---
    async function showAuditLog(entity, entityId) {
        const modal = document.createElement('div');
        modal.style = 'position:fixed;top:0;left:0;width:100vw;height:100vh;background:#0005;z-index:9999;display:flex;align-items:center;justify-content:center;';
        modal.innerHTML = `<div style="background:#fff;padding:24px 32px;max-width:700px;width:100%;border-radius:12px;max-height:90vh;overflow:auto;position:relative;">
            <button id="close-audit-modal" style="position:absolute;top:8px;right:12px;font-size:1.3em;background:none;border:none;">√ó</button>
            <h2 style="margin-top:0;">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (${entity} #${entityId})</h2>
            <div id="audit-log-body">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>`;
        document.body.appendChild(modal);
        document.getElementById('close-audit-modal').onclick = () => modal.remove();
        const res = await fetch(`/api/audit-log?entity=${entity}&entityId=${entityId}`, { headers: { 'Authorization': 'Bearer ' + token } });
        const data = await res.json();
        const body = document.getElementById('audit-log-body');
        if (!Array.isArray(data) || !data.length) {
            body.innerHTML = '<div style="color:#888;">–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π</div>';
        } else {
            body.innerHTML = '<ul style="padding-left:18px;">' + data.map(a => `<li><b>${a.ts.replace('T',' ').slice(0,19)}</b> ‚Äî <b>${a.action}</b> (${a.entity} #${a.entity_id})<br>${a.details || ''}</li>`).join('') + '</ul>';
        }
    }
    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    addExportButtons();
}); 